// extern crate tera;

mod ssr;
use std::error::Error;
use tera::Tera;
use axum::{Router, routing::get};

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>>{
    let psql_url = "postgres://rix@localhost/rix_test";
    let psql_pool = sqlx::postgres::PgPool::connect(psql_url).await?;

    sqlx::migrate!("./migrations").run(&psql_pool).await?;

    let tera = match Tera::new("../htm/**/*") {
        Ok(t) => t,
        Err(e) => {
            eprintln!("Tera Parsing Error: {}", e);
            std::process::exit(1);
        }
    };

    let app: Router<> = Router::new()
        .route("/", get(ssr::serve(tera, psql_pool.acquire().await))
            );

    let listener = tokio::net::TcpListener::bind("127.0.0.1:8888").await.unwrap();
    axum::serve(listener, app).await.unwrap();

    Ok(())
}
